Spec file:
~~~~~~~~~~
this spec file will teach you the correct ways to write your own one
dont worry, Neko has made sure to write a powerful lexer that discards anything that isnt relevant
thus, this section right here is treated as comments
actually, anything that doesnt start with a $ is treated as a comment, so make sure that whatever you want to be recognized as info must start the line with a $
you arent allowed to use double quotes for the names tho, anything else is fine, no you cant escape them and no Neko doesnt plan to allow that as they shouldnt even be used in any of the specs

the needed info are: $name, $greet, $logic and $version
name is used to tell NekoConnect what your plugin is called so it shows in the GUI
greet is used to dispatch packets to your plugin, make sure the client sends the same greeter as the one you define in your plugin spec
logic is used to tell NekoConnect what the name of the logic script is, Neko couldve gone with a fixed name but having the option is nice ig, also allows to change the logic script, but isnt hot swappable and needs a service restart
version is used to tell the GUI what version your plugin is

spaces are ignored unless inside double quotes so you can write:
 $ name {arguments}

 $name{arguments}

 $ name {
   arguments
 }
each of these examples are valid so long as the line instantly starts with $
you can also write unused values like $nekomimi but they will be ignored when ran, not when parsed

the lexer will error out anything that you may write falsely and be very precise about the issue
each argument started with a $ must be terminated with a ;
anything written after the ; is considered a comment
example:
 $ name {arguments}; this is a comment

$name {"example plugin"}; -> plugin name, shows in GUI
$greet {"ex-plug"};       -> plugin greeter, used in protocol
$logic {"logic"};         -> logic filename, points to the script that runs the logic for the plugin
$version {"1.0"};         -> plugin version, shows in GUI
